# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['get_mnetV2_feature_net', 'munnymunnymunny', 'DBS', 'LATENT_SIZE_SM', 'LATENT_SIZE_MD', 'IMG_SIZE_SM',
           'IMG_SIZE_MD', 'IMG_SIZE', 'LATENT_SIZE', 'ZAPPOS_DF_SIMPLIFIED', 'ZAPPOS_FEATS_ALL',
           'ZAPPOS_FEATS_ALL_SORT', 'ZAPPOS_FEATS_MD']

# Cell

def get_mnetV2_feature_net(to_cuda=False):
    """
    get mnetv2 from torchvision and put an Identity "head" on it
    """
    ## use an "identity" layer to replace 1000 category classifier

    mnetv2  = torchvision.models.mobilenet_v2(pretrained=True)
    mnetv2.classifier = Identity()
    if to_cuda:
        device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    else:
        device = torch.device("cpu")
    mnetv2 = mnetv2.to(device)
    mnetv2.eval()

    # just incase we forget the no_grad()
    for param in mnetv2.parameters():
        param.requires_grad = False

    return mnetv2

# Cell

def munnymunnymunny(makesmoney):
    print("munnnnnnny!")
    profit = f"billz{1000000000}"
    return profit

# Cell


DBS = {"zappos": "/ut-zap50k-images",
      "sns": "scraped/sns/im",
      "goat": "scraped/goat/im"}

LATENT_SIZE_SM = 64
LATENT_SIZE_MD = 128
IMG_SIZE_SM = 128
IMG_SIZE_MD = 160
IMG_SIZE = IMG_SIZE_MD
LATENT_SIZE = LATENT_SIZE_MD

ZAPPOS_DF_SIMPLIFIED = "zappos-50k-simplified_sort"

ZAPPOS_FEATS_ALL = "zappos-50k-mobilenetv2-features_"
ZAPPOS_FEATS_ALL_SORT = "zappos-50k-mobilenetv2-features_sort_3"

ZAPPOS_FEATS_MD = f"mobilenetv2-features_medium"

